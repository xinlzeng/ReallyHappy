Name: Xinle Zeng
Date: Nov 9, 2020

Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000



2. Find the total distinct records by either the foreign key or primary key for each table.
If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 (primary key:id)
ii. Hours = 1562 (foreign key:business_id)
iii. Category = 2643 (foreign key:business_id)
iv. Attribute = 1115 (foreign key:business_id)
v. Review = 10000 (primary key:id)
					= 8090 (foreign key:business_id)
					= 9581 (foreign key:user_id)
vi. Checkin = 493 (foreign key:business_id)
vii. Photo = 10000 (primary key:id)
					= 6493 (foreign key:business_id)
viii. Tip = 537 (foreign key:user_id)
					= 3979 (foreign key:business_id)
ix. User = 10000 (primary key:id)
x. Friend = 11 (foreign key:user_id)
xi. Elite_years = 2780 (foreign key:user_id)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: NO

	SQL code used to arrive at answer:
	SELECT COUNT(*)
	FROM user
	WHERE id IS null
	OR name IS NULL
	OR review_count IS NULL
	OR yelping_since IS NULL
	OR useful IS NULL
	OR funny IS NULL
	OR cool IS NULL
	OR fans IS NULL
	OR average_stars IS NULL
	OR compliment_hot IS NULL
	OR compliment_more IS NULL
	OR compliment_profile IS NULL
	OR compliment_cute IS NULL
	OR compliment_list IS NULL
	OR compliment_note IS NULL
	OR compliment_plain IS NULL
	OR compliment_cool IS NULL
	OR compliment_funny IS NULL
	OR compliment_writer IS NULL
	OR compliment_photos IS NULL

	+----------+
	| COUNT(*) |
	+----------+
	|        0 |
	+----------+

4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars

		min:1		max:5		avg:3.7082


	ii. Table: Business, Column: Stars

		min:1		max:5		avg:3.6549


	iii. Table: Tip, Column: Likes

		min:0		max:2		avg:0.0144


	iv. Table: Checkin, Column: Count

		min:1		max:53		avg:1.9414


	v. Table: User, Column: Review_count

		min:0		max:2000		avg:24.2995



5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	SELECT city, SUM(review_count)
	FROM business
	GROUP BY city
	ORDER BY SUM(review_count) DESC

	Copy and Paste the Result Below:
	+-----------------+-------------------+
	| city            | SUM(review_count) |
	+-----------------+-------------------+
	| Las Vegas       |             82854 |
	| Phoenix         |             34503 |
	| Toronto         |             24113 |
	| Scottsdale      |             20614 |
	| Charlotte       |             12523 |
	| Henderson       |             10871 |
	| Tempe           |             10504 |
	| Pittsburgh      |              9798 |
	| Montréal        |              9448 |
	| Chandler        |              8112 |
	| Mesa            |              6875 |
	| Gilbert         |              6380 |
	| Cleveland       |              5593 |
	| Madison         |              5265 |
	| Glendale        |              4406 |
	| Mississauga     |              3814 |
	| Edinburgh       |              2792 |
	| Peoria          |              2624 |
	| North Las Vegas |              2438 |
	| Markham         |              2352 |
	| Champaign       |              2029 |
	| Stuttgart       |              1849 |
	| Surprise        |              1520 |
	| Lakewood        |              1465 |
	| Goodyear        |              1155 |
	+-----------------+-------------------+
	(Output limit exceeded, 25 of 362 total rows shown)



6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
SELECT stars AS StarRating
,SUM(review_count) AS Count
FROM business
WHERE city = 'Avon'
GROUP BY StarRating

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+------------+-------+
| StarRating | Count |
+------------+-------+
|        1.5 |    10 |
|        2.5 |     6 |
|        3.5 |    88 |
|        4.0 |    21 |
|        4.5 |    31 |
|        5.0 |     3 |
+------------+-------+

ii. Beachwood

	SQL code used to arrive at answer:
	SELECT stars AS StarRating
	,SUM(review_count) AS Count
	FROM business
	WHERE city = 'Beachwood'
	GROUP BY StarRating

	Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
	+------------+-------+
	| StarRating | Count |
	+------------+-------+
	|        2.0 |     8 |
	|        2.5 |     3 |
	|        3.0 |    11 |
	|        3.5 |     6 |
	|        4.0 |    69 |
	|        4.5 |    17 |
	|        5.0 |    23 |
	+------------+-------+


7. Find the top 3 users based on their total number of reviews:

	SQL code used to arrive at answer:
	SELECT id,name,review_count
	FROM user
	ORDER BY review_count DESC
	LIMIT 3

	Copy and Paste the Result Below:
	+------------------------+--------+--------------+
	| id                     | name   | review_count |
	+------------------------+--------+--------------+
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
	| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
	| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
	+------------------------+--------+--------------+


8. Does posing more reviews correlate with more fans?

SELECT name, review_count, fans
FROM user
ORDER BY review_count DESC

+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
| Ed        |          904 |   38 |
| Nicole    |          864 |   43 |
| Fran      |          862 |  124 |
| Mark      |          861 |  115 |
| Christina |          842 |   85 |
| Dominic   |          836 |   37 |
| Lissa     |          834 |  120 |
| Lisa      |          813 |  159 |
| Alison    |          775 |   61 |
| Sui       |          754 |   78 |
| Tim       |          702 |   35 |
| L         |          696 |   10 |
| Angela    |          694 |  101 |
| Crissy    |          676 |   25 |
| Lyn       |          675 |   45 |
+-----------+--------------+------+
(Output limit exceeded, 25 of 10000 total rows shown)

	Please explain your findings and interpretation of the results:
Not exactly, when the count of reviews decreases, the number of fans is more like random rather than has a strong tendency of fall.


9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more reviews with the word "love", as 1780, than with the word "hate", as 232, in the review text.
	+-----------+
	| lovecount |
	+-----------+
	|      1780 |
	+-----------+

	+-----------+
	| hatecount |
	+-----------+
	|       232 |
	+-----------+

	SQL code used to arrive at answer:
	SELECT count(id) AS lovecount
	FROM review
	WHERE text LIKE '%love%'

	SELECT count(id) AS hatecount
	FROM review
	WHERE text LIKE '%hate%'


10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	SELECT id, name, fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10

	Copy and Paste the Result Below:
	+------------------------+-----------+------+
	| id                     | name      | fans |
	+------------------------+-----------+------+
	| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
	| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
	| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
	| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
	| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
	| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
	| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
	| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
	| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
	+------------------------+-----------+------+



Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating.
Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

i. Do the two groups you chose to analyze have a different distribution of hours?
Yes, the businesses with 2-3 stars have a longer opening hours than those with 4-5 stars.

ii. Do the two groups you chose to analyze have a different number of reviews?
Yes, the businesses with 4-5 stars have a larger number of reviews than those with 2-3 stars.

iii. Are you able to infer anything from the location data provided between these two groups? Explain.
Yes, the businesses with 4-5 stars are located in Las Vegas Southeast, while those with 2-3 stars are located in Las Vegas Eastside.

SQL code used for analysis:
SELECT b.name, h.hours, c.category, b.review_count
  , b.city || ' ' || b.neighborhood AS Location
  ,CASE
    WHEN stars BETWEEN 2 AND 3 THEN "2-3 stars"
    WHEN stars BETWEEN 4 AND 5 THEN "4-5 stars"
  END AS StarRating
  ,CASE
    WHEN hours LIKE "Monday%" THEN 1
    WHEN hours LIKE "Tuesday%" THEN 2
    WHEN hours LIKE "Wednesday%" THEN 3
    WHEN hours LIKE "Thursday%" THEN 4
    WHEN hours LIKE "Friday%" THEN 5
    WHEN hours LIKE "Saturday%" THEN 6
    WHEN hours LIKE "Sunday%" THEN 7
  END AS Day
FROM business b INNER JOIN hours h ON b.id = h.business_id
                INNER JOIN category c ON b.id = c.business_id
WHERE (StarRating = "2-3 stars" OR StarRating = "4-5 stars")
  AND (b.city = "Las Vegas" AND category = "Food")
GROUP BY name, Day
ORDER BY name, Day ASC

+-----------------------------+-----------------------+----------+--------------+---------------------+------------+-----+
| name                        | hours                 | category | review_count | Location            | StarRating | Day |
+-----------------------------+-----------------------+----------+--------------+---------------------+------------+-----+
| Sweet Ruby Jane Confections | Monday|10:00-19:00    | Food     |           30 | Las Vegas Southeast | 4-5 stars  |   1 |
| Sweet Ruby Jane Confections | Tuesday|10:00-19:00   | Food     |           30 | Las Vegas Southeast | 4-5 stars  |   2 |
| Sweet Ruby Jane Confections | Wednesday|10:00-19:00 | Food     |           30 | Las Vegas Southeast | 4-5 stars  |   3 |
| Sweet Ruby Jane Confections | Thursday|10:00-19:00  | Food     |           30 | Las Vegas Southeast | 4-5 stars  |   4 |
| Sweet Ruby Jane Confections | Friday|10:00-19:00    | Food     |           30 | Las Vegas Southeast | 4-5 stars  |   5 |
| Sweet Ruby Jane Confections | Saturday|10:00-19:00  | Food     |           30 | Las Vegas Southeast | 4-5 stars  |   6 |
| Walgreens                   | Monday|8:00-22:00     | Food     |            6 | Las Vegas Eastside  | 2-3 stars  |   1 |
| Walgreens                   | Tuesday|8:00-22:00    | Food     |            6 | Las Vegas Eastside  | 2-3 stars  |   2 |
| Walgreens                   | Wednesday|8:00-22:00  | Food     |            6 | Las Vegas Eastside  | 2-3 stars  |   3 |
| Walgreens                   | Thursday|8:00-22:00   | Food     |            6 | Las Vegas Eastside  | 2-3 stars  |   4 |
| Walgreens                   | Friday|8:00-22:00     | Food     |            6 | Las Vegas Eastside  | 2-3 stars  |   5 |
| Walgreens                   | Saturday|8:00-22:00   | Food     |            6 | Las Vegas Eastside  | 2-3 stars  |   6 |
| Walgreens                   | Sunday|8:00-22:00     | Food     |            6 | Las Vegas Eastside  | 2-3 stars  |   7 |
+-----------------------------+-----------------------+----------+--------------+---------------------+------------+-----+


2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.

i. Difference 1:
The average of review count for open business, 31.757, is higher than that for closed ones, 23.198.

ii. Difference 2:
The average of stars rating for open business, 3.679, is higher than that for closed ones, 3.520.


SQL code used for analysis:

SELECT COUNT(DISTINCT(id)), AVG(review_count), AVG(stars),is_open
FROM business
GROUP BY is_open

+---------------------+-------------------+---------------+---------+
| COUNT(DISTINCT(id)) | AVG(review_count) |    AVG(stars) | is_open |
+---------------------+-------------------+---------------+---------+
|                1520 |     23.1980263158 | 3.52039473684 |       0 |
|                8480 |     31.7570754717 | 3.67900943396 |       1 |
+---------------------+-------------------+---------------+---------+


3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include:
Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on.
These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve.
Provide answers, in-line, to all of the following:

i. Indicate the type of analysis you chose to do:
The popular time (check-in count w.r.t day and hour) among a week to the Restaurants category.

ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
To know when is the most popular time (day and hour) among a week to the Restaurants category, which could help the Restaurants category to understand their check-in flow, we need the sum of the check-in count with respect to different day and hour.
Then, in the table of checkin, I extracted the day of the week (Monday, Tuesday, ...) and the hour of the day (0,1,...) from the variable date, and the summation of the checkin count with grouped days and hours.
I also restricted the name of categories as "Restaurants", which is in the table of category.
Then we can see Saturday 13:00 is the most popular time among a week to the Restaurants category, then Sunday 14:00 and 16:00.
Most of the high number of check-in count are in the weekend afternoon.


iii. Output of your finished dataset:
+-------------+-----------------+-----+------+---------------+
| category    | date            | Day | Time | checkin_count |
+-------------+-----------------+-----+------+---------------+
| Restaurants | Saturday-13:00  |   6 | 13   |            23 |
| Restaurants | Sunday-14:00    |   7 | 14   |            21 |
| Restaurants | Sunday-16:00    |   7 | 16   |            20 |
| Restaurants | Sunday-13:00    |   7 | 13   |            14 |
| Restaurants | Sunday-15:00    |   7 | 15   |            12 |
| Restaurants | Sunday-17:00    |   7 | 17   |            10 |
| Restaurants | Friday-21:00    |   5 | 21   |            10 |
| Restaurants | Saturday-0:00   |   6 | 0    |             9 |
| Restaurants | Saturday-15:00  |   6 | 15   |             9 |
| Restaurants | Saturday-22:00  |   6 | 22   |             9 |
| Restaurants | Friday-23:00    |   5 | 23   |             9 |
| Restaurants | Thursday-13:00  |   4 | 13   |             8 |
| Restaurants | Saturday-17:00  |   6 | 17   |             8 |
| Restaurants | Saturday-12:00  |   6 | 12   |             7 |
| Restaurants | Wednesday-15:00 |   3 | 15   |             7 |
| Restaurants | Thursday-16:00  |   4 | 16   |             7 |
| Restaurants | Sunday-19:00    |   7 | 19   |             7 |
| Restaurants | Friday-22:00    |   5 | 22   |             7 |
| Restaurants | Sunday-12:00    |   7 | 12   |             6 |
| Restaurants | Saturday-14:00  |   6 | 14   |             6 |
| Restaurants | Thursday-14:00  |   4 | 14   |             5 |
| Restaurants | Monday-15:00    |   1 | 15   |             5 |
| Restaurants | Friday-16:00    |   5 | 16   |             5 |
| Restaurants | Saturday-16:00  |   6 | 16   |             5 |
| Restaurants | Monday-17:00    |   1 | 17   |             5 |
+-------------+-----------------+-----+------+---------------+
(Output limit exceeded, 25 of 95 total rows shown)

iv. Provide the SQL code you used to create your final dataset:
SELECT category
  ,date
  ,CASE
    WHEN date LIKE "Monday%" THEN 1
    WHEN date LIKE "Tuesday%" THEN 2
    WHEN date LIKE "Wednesday%" THEN 3
    WHEN date LIKE "Thursday%" THEN 4
    WHEN date LIKE "Friday%" THEN 5
    WHEN date LIKE "Saturday%" THEN 6
    WHEN date LIKE "Sunday%" THEN 7
  END AS Day
  ,CASE
    WHEN date LIKE "Monday%"
      THEN SUBSTR(date,length("Monday-")+1,length(date)-length("Monday-")-length(":00"))
    WHEN date LIKE "Tuesday%"
      THEN SUBSTR(date,length("Tuesday-")+1,length(date)-length("Tuesday-")-length(":00"))
    WHEN date LIKE "Wednesday%"
      THEN SUBSTR(date,length("Wednesday-")+1,length(date)-length("Wednesday-")-length(":00"))
    WHEN date LIKE "Thursday%"
      THEN SUBSTR(date,length("Thursday-")+1,length(date)-length("Thursday-")-length(":00"))
    WHEN date LIKE "Friday%"
      THEN SUBSTR(date,length("Friday-")+1,length(date)-length("Friday-")-length(":00"))
    WHEN date LIKE "Saturday%"
      THEN SUBSTR(date,length("Saturday-")+1,length(date)-length("Saturday-")-length(":00"))
    WHEN date LIKE "Sunday%"
      THEN SUBSTR(date,length("Sunday-")+1,length(date)-length("Sunday-")-length(":00"))
  END AS Time
  ,SUM(count) AS checkin_count
FROM checkin c INNER JOIN category g ON c.business_id = g.business_id
WHERE category = "Restaurants"
GROUP BY time, day, category
ORDER BY category ASC, checkin_count DESC
